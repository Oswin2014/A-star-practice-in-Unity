
--A* algorithm-----------------------------
>>Implement process
--Note key point
--design self pseudocode
--understand two sample
--summarize												-||||||
----GridControllerEditor                        		-OVER
----byte                                        		-OVER
----group find same target optimize keypoint Note       -OVER
------找到离已有路径最短距离路径点,再以以点->目的地
--------可在group中找到离目标点最小heuristic点,以此点为起点开始寻路
--------以其它点到此点的G为上限,遍历已有路径找到最近距离点
------保留本组所有寻路过程中计算的网格heuristic值
------保留所有路径, group中其它点寻路如果寻到已有路径点上, 则直接取此交叉点到目标点的路径数据
----GridModel                                           -OVER
----MVC                                                 -OVER

>>understand 1911 A*:

PathFinderFast
{
	FindPath()
	{
		------??? mLocation = (start.Y << mGridYLog2) + start.X;
		//write error, "mGridYLog2" change to "mGridXLog2"
	}
}

--advantage:
>stop toggle
>location(x&y) assemple to one variable
>status and tree structure
>heap structure store opening node
>searchLimit
>check neighbor with direction vector
>heavy diagonal


>>understand Card2 A*:

PathFinder
{
	BuildPath()
	{
		------??? target = CheckDenstination(origin, target);
	}
}

--advantage:
>before find, check start equal target
>self block and dynamic entity block
>follow state
>find fail, get nearest
>optimize: skip node that no block node around it

--------------------------------

>>Design self A*									-||||||
>create repository in GitHub                        -OVER
>grid editor                                        -||||||
--draw grid and node                                -||||||
----understand Card2 grid and 1911 grid             -OVER
----design                                          -OVER
----implement                                       -OVER
--store to grid[,]                                  -OVER
>player in grid                                     -OVER
--position and move target                          -OVER
--state(move/idle) animation                        -Give up
>path finder                                        -||||||
--node class                                        -OVER
--heap store                                        -OVER
--A* algorithm                                      -||||||
----basic algorithm                                 -OVER
----show path in grid area                          -OVER
----scene camera controll                           -OVER
----sometime throw exception                        -OVER
----add algorithm                              		-OVER
----draw calculated grid                            -OVER
--optimize camera wheel drag                        -OVER
--multiple player controll and path draw            -OVER
--player move at path                               -OVER
>expand                                             -Now not use A*
--multiple player move and elude                    -Now not use A*
>optimize(according to path result)                 -Now not use A*
--skip node that no block node around it            -Now not use A*

-----------------------------------------
